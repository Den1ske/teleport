{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Teleport is an extensible scripting toolkit for working with one or more local MODX Revolution installations. It currently functions primarily as a packaging toolkit which extends the MODX Transport APIs and provides commands for extracting and injecting customizable snapshots of MODX deployments. But it can be extended easily to perform an infinite variety of actions related to MODX. Install There are various methods for installing Teleport so you can begin using it. Choose the one that best fits your needs: Phar - The easiest way to start using Teleport is to download the latest teleport.phar and put it in a directory where the application can do it's work. In this distribution, Teleport will attempt to create subdirectories called profile/ and workspace/ where it will store generated site Profiles and Extracted transport packages, respectively. The phar distribution includes all dependencies required to use Teleport. Note however that you cannot run the Teleport HTTP Server from the phar distribution; it is not included in the Phar. Releases - You can download zip and tar.gz formats of any Teleport release, extract them in an appropriate location, and run composer install in that location to download the required dependencies. GitHub releases of the project are available here . Git Clone - Contributors can clone the teleport repository or their own fork of it from GitHub, and run composer install --dev in that location to download the required dependencies, including those specified in the require-dev section of the composer.json . Use Actions At the most basic level, you interact with the Teleport application by calling a specific Teleport action with any number of arguments. Currently, Teleport provides the following Actions: Profile - Generate a JSON profile of a MODX installation that can be used by other Actions to interact with it. Extract - Extract files, data, and/or other artifacts described by a specified extract tpl , from a MODX installation described by a specified profile, and package them into a transport that can later be Injected into any other MODX installation. Inject - Inject a specified transport package generated by a Teleport Extract, into a MODX installation described by a specified profile. Push - Push a specified source file to a specified target location. UserCreate - Create a User in a MODX installation described by a specified profile. Packages/GC - Remove outdated versions of packages from a MODX installation described by a specified profile. Workspace/GC - Empty the contents of the Teleport workspace. CLI Requests The simplest way to use Teleport is by calling Teleport Actions on the command line. See documentation for an Action to discover the required and optional arguments for calling that specific Teleport Action. Teleport HTTP Server Teleport comes with a custom HTTP server , built with ReactPHP that can be run on any server port. This allows access to Teleport Actions over HTTP, bypassing timeout and other issues that can occur when attempting to execute long-running processes using your public web server configuration. Extend Teleport is intended to be easily extensible in a couple of ways. For best results, it is recommended you create your own project using Teleport as a library where you can track your custom additions to the application in the VCS of your choice. The easiest way to get started with a custom Teleport project is by using Composer's create-project command from the modxcms/teleport-project boilerplate package. php composer.phar create-project --prefer-source --stability=dev modxcms/teleport-project teleport-opengeek/ You can find more information about using the boilerplate package at the GitHub project . Custom Extracts The Teleport Extract Action uses a JSON extract tpl to describe how a transport package is created from a variety of MODX site resources. You can easily create your own tpls to quickly build custom packages for an infinite variety of purposes from backing up sites, to building extras, to creating custom deployment workflows. See Creating Custom Extract Tpls for more information. Custom Teleport Actions Coming soon: the ability to define Custom Actions when using Teleport as a library in your application. Contribute We welcome all contributions to the Teleport application and library. Learn more about the variety of ways you can contribute and how.","title":"Introduction"},{"location":"#introduction","text":"Teleport is an extensible scripting toolkit for working with one or more local MODX Revolution installations. It currently functions primarily as a packaging toolkit which extends the MODX Transport APIs and provides commands for extracting and injecting customizable snapshots of MODX deployments. But it can be extended easily to perform an infinite variety of actions related to MODX.","title":"Introduction"},{"location":"#install","text":"There are various methods for installing Teleport so you can begin using it. Choose the one that best fits your needs: Phar - The easiest way to start using Teleport is to download the latest teleport.phar and put it in a directory where the application can do it's work. In this distribution, Teleport will attempt to create subdirectories called profile/ and workspace/ where it will store generated site Profiles and Extracted transport packages, respectively. The phar distribution includes all dependencies required to use Teleport. Note however that you cannot run the Teleport HTTP Server from the phar distribution; it is not included in the Phar. Releases - You can download zip and tar.gz formats of any Teleport release, extract them in an appropriate location, and run composer install in that location to download the required dependencies. GitHub releases of the project are available here . Git Clone - Contributors can clone the teleport repository or their own fork of it from GitHub, and run composer install --dev in that location to download the required dependencies, including those specified in the require-dev section of the composer.json .","title":"Install"},{"location":"#use","text":"","title":"Use"},{"location":"#actions","text":"At the most basic level, you interact with the Teleport application by calling a specific Teleport action with any number of arguments. Currently, Teleport provides the following Actions: Profile - Generate a JSON profile of a MODX installation that can be used by other Actions to interact with it. Extract - Extract files, data, and/or other artifacts described by a specified extract tpl , from a MODX installation described by a specified profile, and package them into a transport that can later be Injected into any other MODX installation. Inject - Inject a specified transport package generated by a Teleport Extract, into a MODX installation described by a specified profile. Push - Push a specified source file to a specified target location. UserCreate - Create a User in a MODX installation described by a specified profile. Packages/GC - Remove outdated versions of packages from a MODX installation described by a specified profile. Workspace/GC - Empty the contents of the Teleport workspace.","title":"Actions"},{"location":"#cli-requests","text":"The simplest way to use Teleport is by calling Teleport Actions on the command line. See documentation for an Action to discover the required and optional arguments for calling that specific Teleport Action.","title":"CLI Requests"},{"location":"#teleport-http-server","text":"Teleport comes with a custom HTTP server , built with ReactPHP that can be run on any server port. This allows access to Teleport Actions over HTTP, bypassing timeout and other issues that can occur when attempting to execute long-running processes using your public web server configuration.","title":"Teleport HTTP Server"},{"location":"#extend","text":"Teleport is intended to be easily extensible in a couple of ways. For best results, it is recommended you create your own project using Teleport as a library where you can track your custom additions to the application in the VCS of your choice. The easiest way to get started with a custom Teleport project is by using Composer's create-project command from the modxcms/teleport-project boilerplate package. php composer.phar create-project --prefer-source --stability=dev modxcms/teleport-project teleport-opengeek/ You can find more information about using the boilerplate package at the GitHub project .","title":"Extend"},{"location":"#custom-extracts","text":"The Teleport Extract Action uses a JSON extract tpl to describe how a transport package is created from a variety of MODX site resources. You can easily create your own tpls to quickly build custom packages for an infinite variety of purposes from backing up sites, to building extras, to creating custom deployment workflows. See Creating Custom Extract Tpls for more information.","title":"Custom Extracts"},{"location":"#custom-teleport-actions","text":"Coming soon: the ability to define Custom Actions when using Teleport as a library in your application.","title":"Custom Teleport Actions"},{"location":"#contribute","text":"We welcome all contributions to the Teleport application and library. Learn more about the variety of ways you can contribute and how.","title":"Contribute"},{"location":"contribute/","text":"Contribute","title":"Contribute"},{"location":"contribute/#contribute","text":"","title":"Contribute"},{"location":"extend/custom-actions/","text":"Custom Actions","title":"Custom Actions"},{"location":"extend/custom-actions/#custom-actions","text":"","title":"Custom Actions"},{"location":"extend/custom-extract-tpls/","text":"Custom Extract tpls NOTE: If you want to maintain a custom Teleport project with your own templates so that you can compile your own custom phar or track your project in version control, you should start a new project using the Teleport boilerplate project . This will allow you to maintain your own custom code and update the core Teleport code and artifacts as dictated by your own project requirements. Defining a tpl An Extract tpl is a JSON file that describes how to build a Teleport transport package. It consists of three main properties: a name , some package attributes , and a collection of one or more vehicles . Naming the tpl An Extract tpl's name is used when producing the file name of an Extracted transport package. For this reason, you should avoid the - or other special characters in the tpl name . Use _ for word separators if you need them. Attributes for the package available in teleport >=1.2.0 The attributes property provides a way to set the attributes of the transport package that is produced by the Extract. For instance, this can be used to set package attributes used by package management when installing Extras, allowing you to use Teleport as an easy way to create installable transport packages for use within any MODX installation. NOTE however that when producing packages to be used as MODX Extras, you must avoid the use of Teleport-specific transport vehicle classes. Limit the vehicles you define for these packages to those available in xPDO itself ( xPDOObjectVehicle , xPDOFileVehicle , xPDOScriptVehicle , or xPDOTransportVehicle ). Here is an example use of the attributes property that could be used to create an installable Extras package which. This theoretical test component located in the MODX core/components/ directory specifies a dependency on the collections extra at version 3.x (for MODX 2.4 package dependency features) and includes the content of a changelog.txt file located within the component's directory as the changelog attribute: \"attributes\": { \"changelog\": { \"sourceType\": \"fileContent\", \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\" }, \"requires\": { \"collections\": \"~3.0\" } }, As you can see in this example, individual attributes can get their content from a file available to the Extract by setting the value of the attribute to an object with the properties sourceType and source where the sourceType value is set to fileContent and the source is the full path to the file to use the content from. Other sourceType 's may be supported in the future. Describing the Vehicles The vehicles property describes a collection of xPDO transport vehicles that will be included in the package in the order they are described. The vehicles can be core xPDOVehicle derivatives, Teleport-specific derivatives, or even custom derivatives. A simple example from the settings.tpl.json included with Teleport describes two xPDOObject vehicles that will package all System and Context Settings from a MODX installation: \"vehicles\": [ { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modSystemSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } }, { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modContextSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } } ] When Inject ed, the packaged object vehicles will preserve their payload's primary keys and update existing objects in the injection target that match by primary key, as described in the attributes provided for each vehicle in the collection. Each vehicle consists of an optional vehicle_package , a vehicle_class , an object defining the vehicle payload, and optional attributes of the vehicle. The vehicle_package should be omitted when using the core xPDOVehicle implementations. The object will be unique to each vehicle_class implementation. xPDOFileVehicle source : the absolute path to a file or directory to be packaged target : a PHP expression that will be eval() 'd during installation to determine where the file/directory is unpacked xPDOObjectVehicle class : defines the xPDOObject class to be packaged by the vehicle criteria : an array or object describing the criteria that will be used to select instances of the specified class . The default value of [\"1 = 1\"] is used to return true for all objects, but can be replaced with other statements like [\"id:!=\":2] . graph : defines an object graph to use to package related xPDOObjects graphCriteria : defines the criteria for filtering related xPDOObjects selected by a graph script : an optional script to be used to create the vehicle or vehicles for this vehicle definition package : the xPDO package name for the specified class xPDOScriptVehicle source : a script to be executed during installation of the vehicle","title":"Custom Extract tpls"},{"location":"extend/custom-extract-tpls/#custom-extract-tpls","text":"NOTE: If you want to maintain a custom Teleport project with your own templates so that you can compile your own custom phar or track your project in version control, you should start a new project using the Teleport boilerplate project . This will allow you to maintain your own custom code and update the core Teleport code and artifacts as dictated by your own project requirements.","title":"Custom Extract tpls"},{"location":"extend/custom-extract-tpls/#defining-a-tpl","text":"An Extract tpl is a JSON file that describes how to build a Teleport transport package. It consists of three main properties: a name , some package attributes , and a collection of one or more vehicles .","title":"Defining a tpl"},{"location":"extend/custom-extract-tpls/#naming-the-tpl","text":"An Extract tpl's name is used when producing the file name of an Extracted transport package. For this reason, you should avoid the - or other special characters in the tpl name . Use _ for word separators if you need them.","title":"Naming the tpl"},{"location":"extend/custom-extract-tpls/#attributes-for-the-package","text":"available in teleport >=1.2.0 The attributes property provides a way to set the attributes of the transport package that is produced by the Extract. For instance, this can be used to set package attributes used by package management when installing Extras, allowing you to use Teleport as an easy way to create installable transport packages for use within any MODX installation. NOTE however that when producing packages to be used as MODX Extras, you must avoid the use of Teleport-specific transport vehicle classes. Limit the vehicles you define for these packages to those available in xPDO itself ( xPDOObjectVehicle , xPDOFileVehicle , xPDOScriptVehicle , or xPDOTransportVehicle ). Here is an example use of the attributes property that could be used to create an installable Extras package which. This theoretical test component located in the MODX core/components/ directory specifies a dependency on the collections extra at version 3.x (for MODX 2.4 package dependency features) and includes the content of a changelog.txt file located within the component's directory as the changelog attribute: \"attributes\": { \"changelog\": { \"sourceType\": \"fileContent\", \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\" }, \"requires\": { \"collections\": \"~3.0\" } }, As you can see in this example, individual attributes can get their content from a file available to the Extract by setting the value of the attribute to an object with the properties sourceType and source where the sourceType value is set to fileContent and the source is the full path to the file to use the content from. Other sourceType 's may be supported in the future.","title":"Attributes for the package"},{"location":"extend/custom-extract-tpls/#describing-the-vehicles","text":"The vehicles property describes a collection of xPDO transport vehicles that will be included in the package in the order they are described. The vehicles can be core xPDOVehicle derivatives, Teleport-specific derivatives, or even custom derivatives. A simple example from the settings.tpl.json included with Teleport describes two xPDOObject vehicles that will package all System and Context Settings from a MODX installation: \"vehicles\": [ { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modSystemSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } }, { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modContextSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } } ] When Inject ed, the packaged object vehicles will preserve their payload's primary keys and update existing objects in the injection target that match by primary key, as described in the attributes provided for each vehicle in the collection. Each vehicle consists of an optional vehicle_package , a vehicle_class , an object defining the vehicle payload, and optional attributes of the vehicle. The vehicle_package should be omitted when using the core xPDOVehicle implementations. The object will be unique to each vehicle_class implementation.","title":"Describing the Vehicles"},{"location":"extend/custom-extract-tpls/#xpdofilevehicle","text":"source : the absolute path to a file or directory to be packaged target : a PHP expression that will be eval() 'd during installation to determine where the file/directory is unpacked","title":"xPDOFileVehicle"},{"location":"extend/custom-extract-tpls/#xpdoobjectvehicle","text":"class : defines the xPDOObject class to be packaged by the vehicle criteria : an array or object describing the criteria that will be used to select instances of the specified class . The default value of [\"1 = 1\"] is used to return true for all objects, but can be replaced with other statements like [\"id:!=\":2] . graph : defines an object graph to use to package related xPDOObjects graphCriteria : defines the criteria for filtering related xPDOObjects selected by a graph script : an optional script to be used to create the vehicle or vehicles for this vehicle definition package : the xPDO package name for the specified class","title":"xPDOObjectVehicle"},{"location":"extend/custom-extract-tpls/#xpdoscriptvehicle","text":"source : a script to be executed during installation of the vehicle","title":"xPDOScriptVehicle"},{"location":"install/git-clone/","text":"Teleport Source Installation via Git Clone Contributors will want to use this method to install Teleport so they can easily submit pull requests to the project. Create a Working Directory for the Application First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ . Fork modxcms/teleport Go to modxcms/teleport and click the Fork button. NOTE: This is only required if you plan on submitting pull requests to the Teleport application. Clone Clone the modxcms/teleport repository into your Teleport working directory: git clone git@github.com:modxcms/teleport.git ~/teleport/ or your fork: git clone git@github.com:username/teleport.git ~/teleport/ Add upstream If you forked the repository in order to contribute, you will want to add the official modxcms/teleport repository as a remote: git remote add upstream git@github.com:modxcms/teleport.git Install Dependencies with Composer You will need to install the dependencies for using and optionally for developing Teleport using Composer . Within the root of your cloned repository's working directory: composer install --dev Running Teleport from Source The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see php teleport.phar in the documentation examples you should substitute bin/teleport to run the application instead. Get Started Get started using Teleport by generating a Profile of a local MODX installation.","title":"Teleport Source Installation via _Git Clone_"},{"location":"install/git-clone/#teleport-source-installation-via-git-clone","text":"Contributors will want to use this method to install Teleport so they can easily submit pull requests to the project.","title":"Teleport Source Installation via Git Clone"},{"location":"install/git-clone/#create-a-working-directory-for-the-application","text":"First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ .","title":"Create a Working Directory for the Application"},{"location":"install/git-clone/#fork-modxcmsteleport","text":"Go to modxcms/teleport and click the Fork button. NOTE: This is only required if you plan on submitting pull requests to the Teleport application.","title":"Fork modxcms/teleport"},{"location":"install/git-clone/#clone","text":"Clone the modxcms/teleport repository into your Teleport working directory: git clone git@github.com:modxcms/teleport.git ~/teleport/ or your fork: git clone git@github.com:username/teleport.git ~/teleport/","title":"Clone"},{"location":"install/git-clone/#add-upstream","text":"If you forked the repository in order to contribute, you will want to add the official modxcms/teleport repository as a remote: git remote add upstream git@github.com:modxcms/teleport.git","title":"Add upstream"},{"location":"install/git-clone/#install-dependencies-with-composer","text":"You will need to install the dependencies for using and optionally for developing Teleport using Composer . Within the root of your cloned repository's working directory: composer install --dev","title":"Install Dependencies with Composer"},{"location":"install/git-clone/#running-teleport-from-source","text":"The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see php teleport.phar in the documentation examples you should substitute bin/teleport to run the application instead.","title":"Running Teleport from Source"},{"location":"install/git-clone/#get-started","text":"Get started using Teleport by generating a Profile of a local MODX installation.","title":"Get Started"},{"location":"install/phar/","text":"Teleport Phar Installation This is the easiest way to install and start using the Teleport application. Create a Working Directory for the Application First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ . Download Download the latest teleport.phar distribution of Teleport into your Teleport working directory. Get Started Get started using Teleport by generating a Profile of a local MODX installation.","title":"Teleport Phar Installation"},{"location":"install/phar/#teleport-phar-installation","text":"This is the easiest way to install and start using the Teleport application.","title":"Teleport Phar Installation"},{"location":"install/phar/#create-a-working-directory-for-the-application","text":"First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ .","title":"Create a Working Directory for the Application"},{"location":"install/phar/#download","text":"Download the latest teleport.phar distribution of Teleport into your Teleport working directory.","title":"Download"},{"location":"install/phar/#get-started","text":"Get started using Teleport by generating a Profile of a local MODX installation.","title":"Get Started"},{"location":"install/releases/","text":"Teleport Source Installation via Releases Create a Working Directory for the Application First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ . Download a Release of Teleport Download a release of Teleport and extract it into your Teleport working directory. Install Dependencies with Composer You will need to install the dependencies for using and optionally for developing Teleport using Composer . Within the root of your cloned repository's working directory: composer install --dev Running Teleport from Source The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see php teleport.phar in the documentation examples you should substitute bin/teleport to run the application instead. Get Started Get started using Teleport by generating a Profile of a local MODX installation.","title":"Teleport Source Installation via _Releases_"},{"location":"install/releases/#teleport-source-installation-via-releases","text":"","title":"Teleport Source Installation via Releases"},{"location":"install/releases/#create-a-working-directory-for-the-application","text":"First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be ~/teleport/ .","title":"Create a Working Directory for the Application"},{"location":"install/releases/#download-a-release-of-teleport","text":"Download a release of Teleport and extract it into your Teleport working directory.","title":"Download a Release of Teleport"},{"location":"install/releases/#install-dependencies-with-composer","text":"You will need to install the dependencies for using and optionally for developing Teleport using Composer . Within the root of your cloned repository's working directory: composer install --dev","title":"Install Dependencies with Composer"},{"location":"install/releases/#running-teleport-from-source","text":"The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see php teleport.phar in the documentation examples you should substitute bin/teleport to run the application instead.","title":"Running Teleport from Source"},{"location":"install/releases/#get-started","text":"Get started using Teleport by generating a Profile of a local MODX installation.","title":"Get Started"},{"location":"use/extract/","text":"Extract The Teleport Extract Action is an extremely flexible transport packaging tool for MODX Revolution. Extract a Teleport Package from a MODX Site You can Extract a Teleport package from a MODX site using the following command: php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json The package will be located in the workspace/ directory if it is created successfully. You can also Extract a Teleport package and push it to any valid stream target using the following command: php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json --target=s3://mybucket/snapshots/ --push In either case, the absolute path to the package is returned by the process as the final output. You can use this as the path for an Inject source. NOTE: The workspace copy is removed after it is pushed unless you pass --preserveWorkspace to the CLI command. The Extract Action Required Arguments --profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the Extract is to be performed against. --tpl=path - A valid stream path to a Teleport Extract tpl which defines the extraction process. Optional Arguments --name=name - Override the name of the created Teleport package signature. By default the profile code and tpl name are concatenated with an _ to form the package name. --version=version - A valid version string (not including the release data) for the created Teleport package signature. By default the current time is used in the format %y%m%d.%H%M.%S . --release=release - A valid release string for the created Teleport package signature. By default the full_version of the site identified by the profile is used. If a version is provided, but no release is, no release is added to the package signature. --target=path - A valid stream path to a folder where the extracted package should be pushed. --push - Indicates if the extracted package should be pushed to the target. --preserveWorkspace - Indicates if the workspace/ copy of the package should be removed after being pushed to a target. NOTE: Individual Extract tpls can use any additional arguments passed to the command line as value replacements in the tpl. See documentation for specific tpls to see what additional arguments, if any, that tpl supports.","title":"Extract"},{"location":"use/extract/#extract","text":"The Teleport Extract Action is an extremely flexible transport packaging tool for MODX Revolution.","title":"Extract"},{"location":"use/extract/#extract-a-teleport-package-from-a-modx-site","text":"You can Extract a Teleport package from a MODX site using the following command: php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json The package will be located in the workspace/ directory if it is created successfully. You can also Extract a Teleport package and push it to any valid stream target using the following command: php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json --target=s3://mybucket/snapshots/ --push In either case, the absolute path to the package is returned by the process as the final output. You can use this as the path for an Inject source. NOTE: The workspace copy is removed after it is pushed unless you pass --preserveWorkspace to the CLI command.","title":"Extract a Teleport Package from a MODX Site"},{"location":"use/extract/#the-extract-action","text":"","title":"The Extract Action"},{"location":"use/extract/#required-arguments","text":"--profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the Extract is to be performed against. --tpl=path - A valid stream path to a Teleport Extract tpl which defines the extraction process.","title":"Required Arguments"},{"location":"use/extract/#optional-arguments","text":"--name=name - Override the name of the created Teleport package signature. By default the profile code and tpl name are concatenated with an _ to form the package name. --version=version - A valid version string (not including the release data) for the created Teleport package signature. By default the current time is used in the format %y%m%d.%H%M.%S . --release=release - A valid release string for the created Teleport package signature. By default the full_version of the site identified by the profile is used. If a version is provided, but no release is, no release is added to the package signature. --target=path - A valid stream path to a folder where the extracted package should be pushed. --push - Indicates if the extracted package should be pushed to the target. --preserveWorkspace - Indicates if the workspace/ copy of the package should be removed after being pushed to a target. NOTE: Individual Extract tpls can use any additional arguments passed to the command line as value replacements in the tpl. See documentation for specific tpls to see what additional arguments, if any, that tpl supports.","title":"Optional Arguments"},{"location":"use/inject/","text":"Inject Inject a Teleport Package You can Inject a Teleport package from any valid stream source into a MODX site using the following command: php teleport.phar --action=Inject --profile=profile/mysite.profile.json --source=workspace/mysite_develop-120315.1106.30-2.2.1-dev.transport.zip NOTE: If the source is not within the workspace/ directory a copy will be pulled to that location and then removed after the Inject completes unless --preserveWorkspace is passed. How Inject Manipulates Snapshots To prevent some data from corrupting a target MODX deployment when it is injected, the Inject action takes the following measures: Before Injection modSystemSetting vehicles with the following keys are removed from the manifest: session_cookie_domain session_cookie_path new_file_permissions new_folder_permissions After Injection modSystemSetting settings_version is set to the actual target version. modSystemSetting session_cookie_domain is set to empty. modSystemSetting session_cookie_path is set to MODX_BASE_PATH . The Inject Action Required Arguments --profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the Inject is to be performed against. --source=path - A valid stream path to a Teleport package to Inject into the MODX instance described by the specified Profile. Optional Arguments --preserveWorkspace - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.","title":"Inject"},{"location":"use/inject/#inject","text":"","title":"Inject"},{"location":"use/inject/#inject-a-teleport-package","text":"You can Inject a Teleport package from any valid stream source into a MODX site using the following command: php teleport.phar --action=Inject --profile=profile/mysite.profile.json --source=workspace/mysite_develop-120315.1106.30-2.2.1-dev.transport.zip NOTE: If the source is not within the workspace/ directory a copy will be pulled to that location and then removed after the Inject completes unless --preserveWorkspace is passed.","title":"Inject a Teleport Package"},{"location":"use/inject/#how-inject-manipulates-snapshots","text":"To prevent some data from corrupting a target MODX deployment when it is injected, the Inject action takes the following measures: Before Injection modSystemSetting vehicles with the following keys are removed from the manifest: session_cookie_domain session_cookie_path new_file_permissions new_folder_permissions After Injection modSystemSetting settings_version is set to the actual target version. modSystemSetting session_cookie_domain is set to empty. modSystemSetting session_cookie_path is set to MODX_BASE_PATH .","title":"How Inject Manipulates Snapshots"},{"location":"use/inject/#the-inject-action","text":"","title":"The Inject Action"},{"location":"use/inject/#required-arguments","text":"--profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the Inject is to be performed against. --source=path - A valid stream path to a Teleport package to Inject into the MODX instance described by the specified Profile.","title":"Required Arguments"},{"location":"use/inject/#optional-arguments","text":"--preserveWorkspace - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.","title":"Optional Arguments"},{"location":"use/profile/","text":"Profile Before using Teleport with a MODX site, you will need to create a Teleport Profile from the installed site. Generate a MODX Site Profile You can automatically generate a Teleport Profile of an existing MODX site using the following command: php teleport.phar --action=Profile --name=\"MySite\" --code=mysite --core_path=/path/to/mysite/modx/core/ --config_key=config The resulting profile will be located at profile/mysite.profile.json and can then be used for Extract, Inject, or other Teleport Actions to target the site represented in the profile. The Profile Action Required Arguments --name='string' - A name for the profile. --core_path=path - The MODX_CORE_PATH of the MODX install to generate the profile from. Optional Arguments --code=string - A simple name for the profile. If not provided, a filtered version of the name argument is used. --config_key - The MODX_CONFIG_KEY of the MODX install if different than the default config value. This is required if the value is not config for the MODX install being targeted. Sample Profile This is a sample Teleport Profile of a MODX site with all the required properties: { \"name\": \"Revo-2.2.x\", \"code\": \"revo_22x\", \"properties\": { \"modx\": { \"core_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/core\\/\", \"config_key\": \"config\", \"context_mgr_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/manager\\/\", \"context_mgr_url\": \"\\/revo-2.2.x\\/manager\\/\", \"context_connectors_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/connectors\\/\", \"context_connectors_url\": \"\\/revo-2.2.x\\/connectors\\/\", \"context_web_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/\", \"context_web_url\": \"\\/revo-2.2.x\\/\" } } }","title":"Profile"},{"location":"use/profile/#profile","text":"Before using Teleport with a MODX site, you will need to create a Teleport Profile from the installed site.","title":"Profile"},{"location":"use/profile/#generate-a-modx-site-profile","text":"You can automatically generate a Teleport Profile of an existing MODX site using the following command: php teleport.phar --action=Profile --name=\"MySite\" --code=mysite --core_path=/path/to/mysite/modx/core/ --config_key=config The resulting profile will be located at profile/mysite.profile.json and can then be used for Extract, Inject, or other Teleport Actions to target the site represented in the profile.","title":"Generate a MODX Site Profile"},{"location":"use/profile/#the-profile-action","text":"","title":"The Profile Action"},{"location":"use/profile/#required-arguments","text":"--name='string' - A name for the profile. --core_path=path - The MODX_CORE_PATH of the MODX install to generate the profile from.","title":"Required Arguments"},{"location":"use/profile/#optional-arguments","text":"--code=string - A simple name for the profile. If not provided, a filtered version of the name argument is used. --config_key - The MODX_CONFIG_KEY of the MODX install if different than the default config value. This is required if the value is not config for the MODX install being targeted.","title":"Optional Arguments"},{"location":"use/profile/#sample-profile","text":"This is a sample Teleport Profile of a MODX site with all the required properties: { \"name\": \"Revo-2.2.x\", \"code\": \"revo_22x\", \"properties\": { \"modx\": { \"core_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/core\\/\", \"config_key\": \"config\", \"context_mgr_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/manager\\/\", \"context_mgr_url\": \"\\/revo-2.2.x\\/manager\\/\", \"context_connectors_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/connectors\\/\", \"context_connectors_url\": \"\\/revo-2.2.x\\/connectors\\/\", \"context_web_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/\", \"context_web_url\": \"\\/revo-2.2.x\\/\" } } }","title":"Sample Profile"},{"location":"use/push/","text":"Push","title":"Push"},{"location":"use/push/#push","text":"","title":"Push"},{"location":"use/server/","text":"Teleport HTTP Server The Teleport HTTP Server is an HTTP server you can run to listen to requests for Teleport Actions on a particular port. Running the HTTP Server You can run the Teleport HTTP Server very easily by executing the bin/server.php or bin/server scripts included with Teleport and specifying the port you want to run the server on. bin/server 8082 Or... php bin/server.php 1337 --verbose This starts the Teleport HTTP listener and allows execution of Teleport Actions over the HTTP protocol. The --verbose option makes Teleport output useful information to stdout from the server. Executing Teleport Actions on the Server Calling a Teleport Action on the server takes the form: http://hostname:port/Action?arg1=value&arg2=1&arg3=value2 For example, to run an Extract: http://localhost:1337/Extract?profile=profile/test_profile.profile.json&tpl=tpl/complete.tpl.json","title":"Teleport HTTP Server"},{"location":"use/server/#teleport-http-server","text":"The Teleport HTTP Server is an HTTP server you can run to listen to requests for Teleport Actions on a particular port.","title":"Teleport HTTP Server"},{"location":"use/server/#running-the-http-server","text":"You can run the Teleport HTTP Server very easily by executing the bin/server.php or bin/server scripts included with Teleport and specifying the port you want to run the server on. bin/server 8082 Or... php bin/server.php 1337 --verbose This starts the Teleport HTTP listener and allows execution of Teleport Actions over the HTTP protocol. The --verbose option makes Teleport output useful information to stdout from the server.","title":"Running the HTTP Server"},{"location":"use/server/#executing-teleport-actions-on-the-server","text":"Calling a Teleport Action on the server takes the form: http://hostname:port/Action?arg1=value&arg2=1&arg3=value2 For example, to run an Extract: http://localhost:1337/Extract?profile=profile/test_profile.profile.json&tpl=tpl/complete.tpl.json","title":"Executing Teleport Actions on the Server"},{"location":"use/user-create/","text":"UserCreate Create a MODX User Account You can create a user in a profiled MODX site using the following command: php teleport.phar --action=UserCreate --profile=profile/mysite.profile.json --username=superuser --password=password --sudo --active --fullname=\"Test User\" --email=testuser@example.com The UserCreate Action Required Arguments --profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the UserCreate is to be performed against. --username=string - A valid MODX username. --email=email - A valid email address for the user. Optional Arguments --password=string - A valid MODX password for the user. If not specified, MODX will generate one and return the value from the command. --fullname='string' - An optional full name for the user. --active - Indicates if the user should be marked active when created. --sudo - Indicates if the user should be created as a sudo user. NOTE: This Action uses the security/user/create processor from the MODX site in the specified profile to create a user. It accepts any additional arguments that the processor does.","title":"UserCreate"},{"location":"use/user-create/#usercreate","text":"","title":"UserCreate"},{"location":"use/user-create/#create-a-modx-user-account","text":"You can create a user in a profiled MODX site using the following command: php teleport.phar --action=UserCreate --profile=profile/mysite.profile.json --username=superuser --password=password --sudo --active --fullname=\"Test User\" --email=testuser@example.com","title":"Create a MODX User Account"},{"location":"use/user-create/#the-usercreate-action","text":"","title":"The UserCreate Action"},{"location":"use/user-create/#required-arguments","text":"--profile=path - A valid stream path to a Teleport Profile . This defines the MODX instance the UserCreate is to be performed against. --username=string - A valid MODX username. --email=email - A valid email address for the user.","title":"Required Arguments"},{"location":"use/user-create/#optional-arguments","text":"--password=string - A valid MODX password for the user. If not specified, MODX will generate one and return the value from the command. --fullname='string' - An optional full name for the user. --active - Indicates if the user should be marked active when created. --sudo - Indicates if the user should be created as a sudo user. NOTE: This Action uses the security/user/create processor from the MODX site in the specified profile to create a user. It accepts any additional arguments that the processor does.","title":"Optional Arguments"},{"location":"use/extract/tpl/","text":"Extract tpls Extract tpls are JSON templates defining what, when, and how various objects, scripts, or file artifacts are to be extracted and packaged into a Teleport transport package. The properties of an Extract tpl Each Extract tpl defines the attributes and vehicles that make up the manifest of a Teleport transport package. The manifest defines what is packaged and in what order. name Every tpl has a name property which helps identify the tpl used to create a transport package. This name is included in the generated package filename. attributes The attributes of a Teleport transport package can be set to make distributable packages that can be installed from within the MODX package management interface. You can set readme, changelog, and license attributes, as well as the requires attribute supported in MODX >=2.4 to specify package dependencies. Note that you can also define an attribute as an object with the properties sourceType and source . For now, fileContent is the only supported sourceType , which uses the source attribute value as a file path or stream URL from which to read the value of the attribute. \"attributes\": { \"changelog\": { \"sourceType\": \"fileContent\", \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\" }, \"requires\": { \"collections\": \"~3.0\" } } This makes it possible to use Teleport to create Extras packages that are ready to install from within MODX. Care will just need to be taken not to use any Teleport-specific vehicle classes in the packages created for this purpose. vehicles Teleport transport vehicles define artifacts that are to be packaged when the tpl is used in an Extract action. They can be core xPDOVehicle classes or they can be Teleport-specific or even custom implementations which extend any of the core xPDOVehicle classes. For example, the following defines a single vehicle that packages files from a specified source into a specified target: \"vehicles\": [ { \"vehicle_class\": \"xPDOFileVehicle\", \"object\": { \"source\": \"{+properties.modx.core_path}components/test\", \"target\": \"return MODX_CORE_PATH . 'components';\" }, \"attributes\": {\"vehicle_class\": \"xPDOFileVehicle\"} } ] Or here is a more complex definition that packages all system and context settings from the MODX database: \"vehicles\": [ { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modSystemSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } }, { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modContextSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } } ] Included tpls changeset.tpl.json - Extract a defined set of changes being recorded by callback functions in the MODX configuration. complete.tpl.json - Extract all core objects, files, and custom database tables from a MODX deployment for replacing an entire deployment. complete_db.tpl.json - Extract all core objects and custom database tables from a MODX deployment. develop.tpl.json - Extract all core objects, files, and custom database tables from a MODX deployment to inject into another deployment, supplementing existing objects and custom tables. elements.tpl.json - Extract all Elements and related data from a MODX deployment to inject into another deployment, updating and supplementing existing Elements. packages.tpl.json - Extract all Packages registered in a MODX deployment to inject into another deployment. promote.tpl.json - Extract core objects, files, and custom database tables except settings from a MODX deployment to inject into another deployment. resource_children.tpl.json - Extract all Resources that are children of a specified parent Resource. resources.tpl.json - Extract all Resources from a MODX deployment to inject into another deployment, updating and supplementing existing Resources. settings.tpl.json - Extract all Settings from a MODX deployment to inject into another deployment, updating and supplementing existing Settings. user.tpl.json - Extract a single User and related data from a MODX deployment to inject into another deployment. users.tpl.json - Extract all Users from a MODX deployment to inject into another deployment, updating and supplementing existing Users. Custom tpls You can create and use your own custom tpls with Teleport. See Extending Teleport with Custom Extract Tpls to get started.","title":"Extract tpls"},{"location":"use/extract/tpl/#extract-tpls","text":"Extract tpls are JSON templates defining what, when, and how various objects, scripts, or file artifacts are to be extracted and packaged into a Teleport transport package.","title":"Extract tpls"},{"location":"use/extract/tpl/#the-properties-of-an-extract-tpl","text":"Each Extract tpl defines the attributes and vehicles that make up the manifest of a Teleport transport package. The manifest defines what is packaged and in what order.","title":"The properties of an Extract tpl"},{"location":"use/extract/tpl/#name","text":"Every tpl has a name property which helps identify the tpl used to create a transport package. This name is included in the generated package filename.","title":"name"},{"location":"use/extract/tpl/#attributes","text":"The attributes of a Teleport transport package can be set to make distributable packages that can be installed from within the MODX package management interface. You can set readme, changelog, and license attributes, as well as the requires attribute supported in MODX >=2.4 to specify package dependencies. Note that you can also define an attribute as an object with the properties sourceType and source . For now, fileContent is the only supported sourceType , which uses the source attribute value as a file path or stream URL from which to read the value of the attribute. \"attributes\": { \"changelog\": { \"sourceType\": \"fileContent\", \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\" }, \"requires\": { \"collections\": \"~3.0\" } } This makes it possible to use Teleport to create Extras packages that are ready to install from within MODX. Care will just need to be taken not to use any Teleport-specific vehicle classes in the packages created for this purpose.","title":"attributes"},{"location":"use/extract/tpl/#vehicles","text":"Teleport transport vehicles define artifacts that are to be packaged when the tpl is used in an Extract action. They can be core xPDOVehicle classes or they can be Teleport-specific or even custom implementations which extend any of the core xPDOVehicle classes. For example, the following defines a single vehicle that packages files from a specified source into a specified target: \"vehicles\": [ { \"vehicle_class\": \"xPDOFileVehicle\", \"object\": { \"source\": \"{+properties.modx.core_path}components/test\", \"target\": \"return MODX_CORE_PATH . 'components';\" }, \"attributes\": {\"vehicle_class\": \"xPDOFileVehicle\"} } ] Or here is a more complex definition that packages all system and context settings from the MODX database: \"vehicles\": [ { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modSystemSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } }, { \"vehicle_class\": \"xPDOObjectVehicle\", \"object\": { \"class\": \"modContextSetting\", \"criteria\": [ \"1 = 1\" ], \"package\": \"modx\" }, \"attributes\": { \"preserve_keys\": true, \"update_object\": true } } ]","title":"vehicles"},{"location":"use/extract/tpl/#included-tpls","text":"changeset.tpl.json - Extract a defined set of changes being recorded by callback functions in the MODX configuration. complete.tpl.json - Extract all core objects, files, and custom database tables from a MODX deployment for replacing an entire deployment. complete_db.tpl.json - Extract all core objects and custom database tables from a MODX deployment. develop.tpl.json - Extract all core objects, files, and custom database tables from a MODX deployment to inject into another deployment, supplementing existing objects and custom tables. elements.tpl.json - Extract all Elements and related data from a MODX deployment to inject into another deployment, updating and supplementing existing Elements. packages.tpl.json - Extract all Packages registered in a MODX deployment to inject into another deployment. promote.tpl.json - Extract core objects, files, and custom database tables except settings from a MODX deployment to inject into another deployment. resource_children.tpl.json - Extract all Resources that are children of a specified parent Resource. resources.tpl.json - Extract all Resources from a MODX deployment to inject into another deployment, updating and supplementing existing Resources. settings.tpl.json - Extract all Settings from a MODX deployment to inject into another deployment, updating and supplementing existing Settings. user.tpl.json - Extract a single User and related data from a MODX deployment to inject into another deployment. users.tpl.json - Extract all Users from a MODX deployment to inject into another deployment, updating and supplementing existing Users.","title":"Included tpls"},{"location":"use/extract/tpl/#custom-tpls","text":"You can create and use your own custom tpls with Teleport. See Extending Teleport with Custom Extract Tpls to get started.","title":"Custom tpls"},{"location":"use/extract/tpl/resource_children/","text":"resource_children.tpl.json This tpl extracts all Children of a specified parent Resource recursively. The following example command would extract all Children of the Resource with an id of 2. php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/resource_children.tpl.json --parent=2 This does not include the parent Resource in the Extract. Arguments Required --parent=id - Indicates the id of the parent Resource to extract children from.","title":"resource_children.tpl.json"},{"location":"use/extract/tpl/resource_children/#resource_childrentpljson","text":"This tpl extracts all Children of a specified parent Resource recursively. The following example command would extract all Children of the Resource with an id of 2. php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/resource_children.tpl.json --parent=2 This does not include the parent Resource in the Extract.","title":"resource_children.tpl.json"},{"location":"use/extract/tpl/resource_children/#arguments","text":"","title":"Arguments"},{"location":"use/extract/tpl/resource_children/#required","text":"--parent=id - Indicates the id of the parent Resource to extract children from.","title":"Required"},{"location":"use/packages/gc/","text":"Packages/GC Package Garbage Collection You can remove outdated packages from a profiled MODX deployment using the following command: php teleport.phar --action=Packages/GC --profile=profile/mysite.profile.json Garbage Collection for MODX Package Management Required Arguments --profile=path - A valid stream path to a Teleport Profile defining the MODX instance this action is to be performed against. Optional Arguments --preserveZip - Prevents removal of the zip files for the outdated packages, removing only the extracted package directories and database records.","title":"Packages/GC"},{"location":"use/packages/gc/#packagesgc","text":"","title":"Packages/GC"},{"location":"use/packages/gc/#package-garbage-collection","text":"You can remove outdated packages from a profiled MODX deployment using the following command: php teleport.phar --action=Packages/GC --profile=profile/mysite.profile.json","title":"Package Garbage Collection"},{"location":"use/packages/gc/#garbage-collection-for-modx-package-management","text":"","title":"Garbage Collection for MODX Package Management"},{"location":"use/packages/gc/#required-arguments","text":"--profile=path - A valid stream path to a Teleport Profile defining the MODX instance this action is to be performed against.","title":"Required Arguments"},{"location":"use/packages/gc/#optional-arguments","text":"--preserveZip - Prevents removal of the zip files for the outdated packages, removing only the extracted package directories and database records.","title":"Optional Arguments"},{"location":"use/workspace/gc/","text":"Workspace/GC Workspace Garbage Collection You can empty the contents of the Teleport workspace with the command: php teleport.phar --action=Workspace/GC WARNING: this will delete everything in the workspace/ directory! Garbage Collection for the Teleport Workspace Required Arguments None required. Optional Arguments No optional arguments.","title":"Workspace/GC"},{"location":"use/workspace/gc/#workspacegc","text":"","title":"Workspace/GC"},{"location":"use/workspace/gc/#workspace-garbage-collection","text":"You can empty the contents of the Teleport workspace with the command: php teleport.phar --action=Workspace/GC WARNING: this will delete everything in the workspace/ directory!","title":"Workspace Garbage Collection"},{"location":"use/workspace/gc/#garbage-collection-for-the-teleport-workspace","text":"","title":"Garbage Collection for the Teleport Workspace"},{"location":"use/workspace/gc/#required-arguments","text":"None required.","title":"Required Arguments"},{"location":"use/workspace/gc/#optional-arguments","text":"No optional arguments.","title":"Optional Arguments"}]}