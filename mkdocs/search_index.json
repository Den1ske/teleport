{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nTeleport is an extensible scripting toolkit for working with one or more local MODX Revolution installations. It currently functions primarily as a packaging toolkit which extends the MODX Transport APIs and provides commands for extracting and injecting customizable snapshots of MODX deployments. But it can be extended easily to perform an infinite variety of actions related to MODX.\n\n\nInstall\n\n\nThere are various methods for installing Teleport so you can begin using it. Choose the one that best fits your needs:\n\n\n\n\n\n\nPhar\n - The easiest way to start using Teleport is to download the \nlatest \nteleport.phar\n and put it in a directory where the application can do it's work. In this distribution, Teleport will attempt to create subdirectories called profile/ and workspace/ where it will store generated site Profiles and Extracted transport packages, respectively. The phar distribution includes all dependencies required to use Teleport. Note however that you cannot run the Teleport HTTP Server from the phar distribution; it is not included in the Phar.\n\n\n\n\n\n\nReleases\n - You can download zip and tar.gz formats of any Teleport release, extract them in an appropriate location, and run \ncomposer install\n in that location to download the required dependencies. GitHub releases of the project are available \nhere\n.\n\n\n\n\n\n\nGit Clone\n - Contributors can clone the teleport repository or their own fork of it from GitHub, and run \ncomposer install --dev\n in that location to download the required dependencies, including those specified in the require-dev section of the \ncomposer.json\n.\n\n\n\n\n\n\nUse\n\n\nActions\n\n\nAt the most basic level, you interact with the Teleport application by calling a specific Teleport action with any number of arguments.\n\n\nCurrently, Teleport provides the following Actions:\n\n\n\n\n\n\nProfile\n - Generate a JSON profile of a MODX installation that can be used by other Actions to interact with it.\n\n\n\n\n\n\nExtract\n - Extract files, data, and/or other artifacts described by a specified \nextract tpl\n, from a MODX installation described by a specified profile, and package them into a transport that can later be Injected into any other MODX installation.\n\n\n\n\n\n\nInject\n - Inject a specified transport package generated by a Teleport Extract, into a MODX installation described by a specified profile.\n\n\n\n\n\n\nPush\n - Push a specified source file to a specified target location.\n\n\n\n\n\n\nUserCreate\n - Create a User in a MODX installation described by a specified profile.\n\n\n\n\n\n\nPackages/GC\n - Remove outdated versions of packages from a MODX installation described by a specified profile.\n\n\n\n\n\n\nCLI Requests\n\n\nThe simplest way to use Teleport is by calling Teleport Actions on the command line. See documentation for an Action to discover the required and optional arguments for calling that specific Teleport Action.\n\n\nTeleport HTTP Server\n\n\nTeleport comes with a \ncustom HTTP server\n, built with \nReactPHP\n that can be run on any server port. This allows access to Teleport Actions over HTTP, bypassing timeout and other issues that can occur when attempting to execute long-running processes using your public web server configuration.\n\n\nExtend\n\n\nTeleport is intended to be easily extensible in a couple of ways. For best results, it is recommended you create your own project using Teleport as a library where you can track your custom additions to the application in the VCS of your choice. The easiest way to get started with a custom Teleport project is by using Composer's create-project command from the modxcms/teleport-project boilerplate package.\n\n\nphp composer.phar create-project --prefer-source --stability=dev modxcms/teleport-project teleport-opengeek/\n\n\n\nYou can find more information about using the boilerplate package at the \nGitHub project\n.\n\n\nCustom Extracts\n\n\nThe Teleport \nExtract Action\n uses a JSON \nextract tpl\n to describe how a transport package is created from a variety of MODX site resources. You can easily create your own tpls to quickly build custom packages for an infinite variety of purposes from backing up sites, to building extras, to creating custom deployment workflows. See \nCreating Custom Extract Tpls\n for more information.\n\n\nCustom Teleport Actions\n\n\nComing soon: the ability to define \nCustom Actions\n when using Teleport as a library in your application.\n\n\nContribute\n\n\nWe welcome all contributions to the Teleport application and library. \nLearn more\n about the variety of ways you can contribute and how.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "Teleport is an extensible scripting toolkit for working with one or more local MODX Revolution installations. It currently functions primarily as a packaging toolkit which extends the MODX Transport APIs and provides commands for extracting and injecting customizable snapshots of MODX deployments. But it can be extended easily to perform an infinite variety of actions related to MODX.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#install", 
            "text": "There are various methods for installing Teleport so you can begin using it. Choose the one that best fits your needs:    Phar  - The easiest way to start using Teleport is to download the  latest  teleport.phar  and put it in a directory where the application can do it's work. In this distribution, Teleport will attempt to create subdirectories called profile/ and workspace/ where it will store generated site Profiles and Extracted transport packages, respectively. The phar distribution includes all dependencies required to use Teleport. Note however that you cannot run the Teleport HTTP Server from the phar distribution; it is not included in the Phar.    Releases  - You can download zip and tar.gz formats of any Teleport release, extract them in an appropriate location, and run  composer install  in that location to download the required dependencies. GitHub releases of the project are available  here .    Git Clone  - Contributors can clone the teleport repository or their own fork of it from GitHub, and run  composer install --dev  in that location to download the required dependencies, including those specified in the require-dev section of the  composer.json .", 
            "title": "Install"
        }, 
        {
            "location": "/#use", 
            "text": "Actions  At the most basic level, you interact with the Teleport application by calling a specific Teleport action with any number of arguments.  Currently, Teleport provides the following Actions:    Profile  - Generate a JSON profile of a MODX installation that can be used by other Actions to interact with it.    Extract  - Extract files, data, and/or other artifacts described by a specified  extract tpl , from a MODX installation described by a specified profile, and package them into a transport that can later be Injected into any other MODX installation.    Inject  - Inject a specified transport package generated by a Teleport Extract, into a MODX installation described by a specified profile.    Push  - Push a specified source file to a specified target location.    UserCreate  - Create a User in a MODX installation described by a specified profile.    Packages/GC  - Remove outdated versions of packages from a MODX installation described by a specified profile.    CLI Requests  The simplest way to use Teleport is by calling Teleport Actions on the command line. See documentation for an Action to discover the required and optional arguments for calling that specific Teleport Action.  Teleport HTTP Server  Teleport comes with a  custom HTTP server , built with  ReactPHP  that can be run on any server port. This allows access to Teleport Actions over HTTP, bypassing timeout and other issues that can occur when attempting to execute long-running processes using your public web server configuration.", 
            "title": "Use"
        }, 
        {
            "location": "/#extend", 
            "text": "Teleport is intended to be easily extensible in a couple of ways. For best results, it is recommended you create your own project using Teleport as a library where you can track your custom additions to the application in the VCS of your choice. The easiest way to get started with a custom Teleport project is by using Composer's create-project command from the modxcms/teleport-project boilerplate package.  php composer.phar create-project --prefer-source --stability=dev modxcms/teleport-project teleport-opengeek/  You can find more information about using the boilerplate package at the  GitHub project .  Custom Extracts  The Teleport  Extract Action  uses a JSON  extract tpl  to describe how a transport package is created from a variety of MODX site resources. You can easily create your own tpls to quickly build custom packages for an infinite variety of purposes from backing up sites, to building extras, to creating custom deployment workflows. See  Creating Custom Extract Tpls  for more information.  Custom Teleport Actions  Coming soon: the ability to define  Custom Actions  when using Teleport as a library in your application.", 
            "title": "Extend"
        }, 
        {
            "location": "/#contribute", 
            "text": "We welcome all contributions to the Teleport application and library.  Learn more  about the variety of ways you can contribute and how.", 
            "title": "Contribute"
        }, 
        {
            "location": "/install/releases/", 
            "text": "Teleport Source Installation via \nReleases\n\n\nCreate a Working Directory for the Application\n\n\nFirst, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be \n~/teleport/\n.\n\n\nDownload a Release of Teleport\n\n\nDownload a \nrelease of Teleport\n and extract it into your Teleport working directory.\n\n\nInstall Dependencies with Composer\n\n\nYou will need to install the dependencies for using and optionally for developing Teleport using \nComposer\n.\n\n\nWithin the root of your cloned repository's working directory:\n\n\ncomposer install --dev\n\n\n\nRunning Teleport from Source\n\n\nThe documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see \nphp teleport.phar\n in the documentation examples you should substitute \nbin/teleport\n to run the application instead.\n\n\nGet Started\n\n\nGet started using Teleport by \ngenerating a Profile\n of a local MODX installation.", 
            "title": "Install from Release"
        }, 
        {
            "location": "/install/releases/#teleport-source-installation-via-releases", 
            "text": "", 
            "title": "Teleport Source Installation via Releases"
        }, 
        {
            "location": "/install/releases/#create-a-working-directory-for-the-application", 
            "text": "First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be  ~/teleport/ .", 
            "title": "Create a Working Directory for the Application"
        }, 
        {
            "location": "/install/releases/#download-a-release-of-teleport", 
            "text": "Download a  release of Teleport  and extract it into your Teleport working directory.", 
            "title": "Download a Release of Teleport"
        }, 
        {
            "location": "/install/releases/#install-dependencies-with-composer", 
            "text": "You will need to install the dependencies for using and optionally for developing Teleport using  Composer .  Within the root of your cloned repository's working directory:  composer install --dev", 
            "title": "Install Dependencies with Composer"
        }, 
        {
            "location": "/install/releases/#running-teleport-from-source", 
            "text": "The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see  php teleport.phar  in the documentation examples you should substitute  bin/teleport  to run the application instead.", 
            "title": "Running Teleport from Source"
        }, 
        {
            "location": "/install/releases/#get-started", 
            "text": "Get started using Teleport by  generating a Profile  of a local MODX installation.", 
            "title": "Get Started"
        }, 
        {
            "location": "/install/git-clone/", 
            "text": "Teleport Source Installation via \nGit Clone\n\n\nContributors will want to use this method to install Teleport so they can easily submit pull requests to the project.\n\n\nCreate a Working Directory for the Application\n\n\nFirst, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be \n~/teleport/\n.\n\n\nFork modxcms/teleport\n\n\nGo to modxcms/teleport and click the Fork button.\n\n\nNOTE: This is only required if you plan on submitting pull requests to the Teleport application.\n\n\nClone\n\n\nClone the modxcms/teleport repository into your Teleport working directory:\n\n\ngit clone git@github.com:modxcms/teleport.git ~/teleport/\n\n\n\nor your fork:\n\n\ngit clone git@github.com:username/teleport.git ~/teleport/\n\n\n\nAdd upstream\n\n\nIf you forked the repository in order to contribute, you will want to add the official modxcms/teleport repository as a remote:\n\n\ngit remote add upstream git@github.com:modxcms/teleport.git\n\n\n\nInstall Dependencies with Composer\n\n\nYou will need to install the dependencies for using and optionally for developing Teleport using \nComposer\n.\n\n\nWithin the root of your cloned repository's working directory:\n\n\ncomposer install --dev\n\n\n\nRunning Teleport from Source\n\n\nThe documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see \nphp teleport.phar\n in the documentation examples you should substitute \nbin/teleport\n to run the application instead.\n\n\nGet Started\n\n\nGet started using Teleport by \ngenerating a Profile\n of a local MODX installation.", 
            "title": "Install from Git"
        }, 
        {
            "location": "/install/git-clone/#teleport-source-installation-via-git-clone", 
            "text": "Contributors will want to use this method to install Teleport so they can easily submit pull requests to the project.", 
            "title": "Teleport Source Installation via Git Clone"
        }, 
        {
            "location": "/install/git-clone/#create-a-working-directory-for-the-application", 
            "text": "First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be  ~/teleport/ .", 
            "title": "Create a Working Directory for the Application"
        }, 
        {
            "location": "/install/git-clone/#fork-modxcmsteleport", 
            "text": "Go to modxcms/teleport and click the Fork button.  NOTE: This is only required if you plan on submitting pull requests to the Teleport application.", 
            "title": "Fork modxcms/teleport"
        }, 
        {
            "location": "/install/git-clone/#clone", 
            "text": "Clone the modxcms/teleport repository into your Teleport working directory:  git clone git@github.com:modxcms/teleport.git ~/teleport/  or your fork:  git clone git@github.com:username/teleport.git ~/teleport/", 
            "title": "Clone"
        }, 
        {
            "location": "/install/git-clone/#add-upstream", 
            "text": "If you forked the repository in order to contribute, you will want to add the official modxcms/teleport repository as a remote:  git remote add upstream git@github.com:modxcms/teleport.git", 
            "title": "Add upstream"
        }, 
        {
            "location": "/install/git-clone/#install-dependencies-with-composer", 
            "text": "You will need to install the dependencies for using and optionally for developing Teleport using  Composer .  Within the root of your cloned repository's working directory:  composer install --dev", 
            "title": "Install Dependencies with Composer"
        }, 
        {
            "location": "/install/git-clone/#running-teleport-from-source", 
            "text": "The documentation assumes you have installed the phar distribution of Teleport. Since you have chosen to install from source, when you see  php teleport.phar  in the documentation examples you should substitute  bin/teleport  to run the application instead.", 
            "title": "Running Teleport from Source"
        }, 
        {
            "location": "/install/git-clone/#get-started", 
            "text": "Get started using Teleport by  generating a Profile  of a local MODX installation.", 
            "title": "Get Started"
        }, 
        {
            "location": "/install/phar/", 
            "text": "Teleport Phar Installation\n\n\nThis is the easiest way to install and start using the Teleport application.\n\n\nCreate a Working Directory for the Application\n\n\nFirst, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be \n~/teleport/\n.\n\n\nDownload\n\n\nDownload the latest \nteleport.phar\n distribution of Teleport into your Teleport working directory.\n\n\nGet Started\n\n\nGet started using Teleport by \ngenerating a Profile\n of a local MODX installation.", 
            "title": "Install Phar"
        }, 
        {
            "location": "/install/phar/#teleport-phar-installation", 
            "text": "This is the easiest way to install and start using the Teleport application.", 
            "title": "Teleport Phar Installation"
        }, 
        {
            "location": "/install/phar/#create-a-working-directory-for-the-application", 
            "text": "First, create a directory where you will run the Teleport application. Teleport will create subdirectories for it's work when being used, and it is best if you create it's own directory where it can live in isolation. A typical location might be  ~/teleport/ .", 
            "title": "Create a Working Directory for the Application"
        }, 
        {
            "location": "/install/phar/#download", 
            "text": "Download the latest  teleport.phar  distribution of Teleport into your Teleport working directory.", 
            "title": "Download"
        }, 
        {
            "location": "/install/phar/#get-started", 
            "text": "Get started using Teleport by  generating a Profile  of a local MODX installation.", 
            "title": "Get Started"
        }, 
        {
            "location": "/use/profile/", 
            "text": "Profile\n\n\nBefore using Teleport with a MODX site, you will need to create a Teleport Profile from the installed site.\n\n\nGenerate a MODX Site Profile\n\n\nYou can automatically generate a Teleport Profile of an existing MODX site using the following command:\n\n\nphp teleport.phar --action=Profile --name=\"MySite\" --code=mysite --core_path=/path/to/mysite/modx/core/ --config_key=config\n\n\n\nThe resulting profile will be located at profile/mysite.profile.json and can then be used for Extract, Inject, or other Teleport Actions to target the site represented in the profile.\n\n\nThe Profile Action\n\n\nRequired Arguments\n\n\n\n\n--name='string'\n - A name for the profile.\n\n\n--core_path=path\n - The \nMODX_CORE_PATH\n of the MODX install to generate the profile from.\n\n\n\n\nOptional Arguments\n\n\n\n\n--code=string\n - A simple name for the profile. If not provided, a filtered version of the \nname\n argument is used.\n\n\n--config_key\n - The \nMODX_CONFIG_KEY\n of the MODX install if different than the default \nconfig\n value. This is \nrequired\n if the value is not \nconfig\n for the MODX install being targeted.\n\n\n\n\nSample Profile\n\n\nThis is a sample Teleport Profile of a MODX site with all the required properties:\n\n\n{\n    \"name\": \"Revo-2.2.x\",\n    \"code\": \"revo_22x\",\n    \"properties\": {\n        \"modx\": {\n            \"core_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/core\\/\",\n            \"config_key\": \"config\",\n            \"context_mgr_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/manager\\/\",\n            \"context_mgr_url\": \"\\/revo-2.2.x\\/manager\\/\",\n            \"context_connectors_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/connectors\\/\",\n            \"context_connectors_url\": \"\\/revo-2.2.x\\/connectors\\/\",\n            \"context_web_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/\",\n            \"context_web_url\": \"\\/revo-2.2.x\\/\"\n        }\n    }\n}", 
            "title": "Profile"
        }, 
        {
            "location": "/use/profile/#profile", 
            "text": "Before using Teleport with a MODX site, you will need to create a Teleport Profile from the installed site.", 
            "title": "Profile"
        }, 
        {
            "location": "/use/profile/#generate-a-modx-site-profile", 
            "text": "You can automatically generate a Teleport Profile of an existing MODX site using the following command:  php teleport.phar --action=Profile --name=\"MySite\" --code=mysite --core_path=/path/to/mysite/modx/core/ --config_key=config  The resulting profile will be located at profile/mysite.profile.json and can then be used for Extract, Inject, or other Teleport Actions to target the site represented in the profile.", 
            "title": "Generate a MODX Site Profile"
        }, 
        {
            "location": "/use/profile/#the-profile-action", 
            "text": "Required Arguments   --name='string'  - A name for the profile.  --core_path=path  - The  MODX_CORE_PATH  of the MODX install to generate the profile from.   Optional Arguments   --code=string  - A simple name for the profile. If not provided, a filtered version of the  name  argument is used.  --config_key  - The  MODX_CONFIG_KEY  of the MODX install if different than the default  config  value. This is  required  if the value is not  config  for the MODX install being targeted.", 
            "title": "The Profile Action"
        }, 
        {
            "location": "/use/profile/#sample-profile", 
            "text": "This is a sample Teleport Profile of a MODX site with all the required properties:  {\n    \"name\": \"Revo-2.2.x\",\n    \"code\": \"revo_22x\",\n    \"properties\": {\n        \"modx\": {\n            \"core_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/core\\/\",\n            \"config_key\": \"config\",\n            \"context_mgr_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/manager\\/\",\n            \"context_mgr_url\": \"\\/revo-2.2.x\\/manager\\/\",\n            \"context_connectors_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/connectors\\/\",\n            \"context_connectors_url\": \"\\/revo-2.2.x\\/connectors\\/\",\n            \"context_web_path\": \"\\/home\\/user\\/www\\/revo-2.2.x\\/\",\n            \"context_web_url\": \"\\/revo-2.2.x\\/\"\n        }\n    }\n}", 
            "title": "Sample Profile"
        }, 
        {
            "location": "/use/extract/", 
            "text": "Extract\n\n\nThe Teleport Extract Action is an extremely flexible transport packaging tool for MODX Revolution.\n\n\nExtract a Teleport Package from a MODX Site\n\n\nYou can Extract a Teleport package from a MODX site using the following command:\n\n\nphp teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json\n\n\n\nThe package will be located in the workspace/ directory if it is created successfully.\n\n\nYou can also Extract a Teleport package and push it to any valid stream target using the following command:\n\n\nphp teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json --target=s3://mybucket/snapshots/ --push\n\n\n\nIn either case, the absolute path to the package is returned by the process as the final output. You can use this as the path for an Inject source.\n\n\nNOTE: The workspace copy is removed after it is pushed unless you pass --preserveWorkspace to the CLI command.\n\n\nThe Extract Action\n\n\nRequired Arguments\n\n\n\n\n--profile=path\n - A valid stream path to a Teleport \nProfile\n. This defines the MODX instance the Extract is to be performed against.\n\n\n--tpl=path\n - A valid stream path to a Teleport \nExtract tpl\n which defines the extraction process.\n\n\n\n\nOptional Arguments\n\n\n\n\n--target=path\n - A valid stream path to a folder where the extracted package should be pushed.\n\n\n--push\n - Indicates if the extracted package should be pushed to the target.\n\n\n--preserveWorkspace\n - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.\n\n\n\n\nNOTE: Individual Extract tpls can use any additional arguments passed to the command line as value replacements in the tpl. See documentation for specific tpls to see what additional arguments, if any, that tpl supports.", 
            "title": "Extract"
        }, 
        {
            "location": "/use/extract/#extract", 
            "text": "The Teleport Extract Action is an extremely flexible transport packaging tool for MODX Revolution.", 
            "title": "Extract"
        }, 
        {
            "location": "/use/extract/#extract-a-teleport-package-from-a-modx-site", 
            "text": "You can Extract a Teleport package from a MODX site using the following command:  php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json  The package will be located in the workspace/ directory if it is created successfully.  You can also Extract a Teleport package and push it to any valid stream target using the following command:  php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/complete.tpl.json --target=s3://mybucket/snapshots/ --push  In either case, the absolute path to the package is returned by the process as the final output. You can use this as the path for an Inject source.  NOTE: The workspace copy is removed after it is pushed unless you pass --preserveWorkspace to the CLI command.", 
            "title": "Extract a Teleport Package from a MODX Site"
        }, 
        {
            "location": "/use/extract/#the-extract-action", 
            "text": "Required Arguments   --profile=path  - A valid stream path to a Teleport  Profile . This defines the MODX instance the Extract is to be performed against.  --tpl=path  - A valid stream path to a Teleport  Extract tpl  which defines the extraction process.   Optional Arguments   --target=path  - A valid stream path to a folder where the extracted package should be pushed.  --push  - Indicates if the extracted package should be pushed to the target.  --preserveWorkspace  - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.   NOTE: Individual Extract tpls can use any additional arguments passed to the command line as value replacements in the tpl. See documentation for specific tpls to see what additional arguments, if any, that tpl supports.", 
            "title": "The Extract Action"
        }, 
        {
            "location": "/use/inject/", 
            "text": "Inject\n\n\nInject a Teleport Package\n\n\nYou can Inject a Teleport package from any valid stream source into a MODX site using the following command:\n\n\nphp teleport.phar --action=Inject --profile=profile/mysite.profile.json --source=workspace/mysite_develop-120315.1106.30-2.2.1-dev.transport.zip\n\n\n\nNOTE: If the source is not within the workspace/ directory a copy will be pulled to that location and then removed after the Inject completes unless --preserveWorkspace is passed.\n\n\nHow Inject Manipulates Snapshots\n\n\nTo prevent some data from corrupting a target MODX deployment when it is injected, the Inject action takes the following measures:\n\n\n\n\nBefore Injection\n\n\nmodSystemSetting vehicles with the following keys are removed from the manifest:\n\n\nsession_cookie_domain\n\n\nsession_cookie_path\n\n\nnew_file_permissions\n\n\nnew_folder_permissions\n\n\n\n\n\n\n\n\n\n\nAfter Injection\n\n\nmodSystemSetting \nsettings_version\n is set to the actual target version.\n\n\nmodSystemSetting \nsession_cookie_domain\n is set to empty.\n\n\nmodSystemSetting \nsession_cookie_path\n is set to \nMODX_BASE_PATH\n.\n\n\n\n\n\n\n\n\nThe Inject Action\n\n\nRequired Arguments\n\n\n\n\n--profile=path\n - A valid stream path to a Teleport \nProfile\n. This defines the MODX instance the Inject is to be performed against.\n\n\n--source=path\n - A valid stream path to a Teleport package to Inject into the MODX instance described by the specified Profile.\n\n\n\n\nOptional Arguments\n\n\n\n\n--preserveWorkspace\n - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.", 
            "title": "Inject"
        }, 
        {
            "location": "/use/inject/#inject", 
            "text": "", 
            "title": "Inject"
        }, 
        {
            "location": "/use/inject/#inject-a-teleport-package", 
            "text": "You can Inject a Teleport package from any valid stream source into a MODX site using the following command:  php teleport.phar --action=Inject --profile=profile/mysite.profile.json --source=workspace/mysite_develop-120315.1106.30-2.2.1-dev.transport.zip  NOTE: If the source is not within the workspace/ directory a copy will be pulled to that location and then removed after the Inject completes unless --preserveWorkspace is passed.  How Inject Manipulates Snapshots  To prevent some data from corrupting a target MODX deployment when it is injected, the Inject action takes the following measures:   Before Injection  modSystemSetting vehicles with the following keys are removed from the manifest:  session_cookie_domain  session_cookie_path  new_file_permissions  new_folder_permissions      After Injection  modSystemSetting  settings_version  is set to the actual target version.  modSystemSetting  session_cookie_domain  is set to empty.  modSystemSetting  session_cookie_path  is set to  MODX_BASE_PATH .", 
            "title": "Inject a Teleport Package"
        }, 
        {
            "location": "/use/inject/#the-inject-action", 
            "text": "Required Arguments   --profile=path  - A valid stream path to a Teleport  Profile . This defines the MODX instance the Inject is to be performed against.  --source=path  - A valid stream path to a Teleport package to Inject into the MODX instance described by the specified Profile.   Optional Arguments   --preserveWorkspace  - Indicates if the workspace/ copy of the package should be removed after being pushed to a target.", 
            "title": "The Inject Action"
        }, 
        {
            "location": "/use/push/", 
            "text": "Push", 
            "title": "Push"
        }, 
        {
            "location": "/use/push/#push", 
            "text": "", 
            "title": "Push"
        }, 
        {
            "location": "/use/user-create/", 
            "text": "UserCreate\n\n\nCreate a MODX User Account\n\n\nYou can create a user in a profiled MODX site using the following command:\n\n\nphp teleport.phar --action=UserCreate --profile=profile/mysite.profile.json --username=superuser --password=password --sudo --active --fullname=\"Test User\" --email=testuser@example.com\n\n\n\nThe UserCreate Action\n\n\nRequired Arguments\n\n\n\n\n--profile=path\n - A valid stream path to a Teleport \nProfile\n. This defines the MODX instance the UserCreate is to be performed against.\n\n\n--username=string\n - A valid MODX username.\n\n\n--email=email\n - A valid email address for the user.\n\n\n\n\nOptional Arguments\n\n\n\n\n--password=string\n - A valid MODX password for the user. If not specified, MODX will generate one and return the value from the command.\n\n\n--fullname='string'\n - An optional full name for the user.\n\n\n--active\n - Indicates if the user should be marked active when created.\n\n\n--sudo\n - Indicates if the user should be created as a sudo user.\n\n\n\n\nNOTE: This Action uses the security/user/create processor from the MODX site in the specified profile to create a user. It accepts any additional arguments that the processor does.", 
            "title": "User Create"
        }, 
        {
            "location": "/use/user-create/#usercreate", 
            "text": "", 
            "title": "UserCreate"
        }, 
        {
            "location": "/use/user-create/#create-a-modx-user-account", 
            "text": "You can create a user in a profiled MODX site using the following command:  php teleport.phar --action=UserCreate --profile=profile/mysite.profile.json --username=superuser --password=password --sudo --active --fullname=\"Test User\" --email=testuser@example.com", 
            "title": "Create a MODX User Account"
        }, 
        {
            "location": "/use/user-create/#the-usercreate-action", 
            "text": "Required Arguments   --profile=path  - A valid stream path to a Teleport  Profile . This defines the MODX instance the UserCreate is to be performed against.  --username=string  - A valid MODX username.  --email=email  - A valid email address for the user.   Optional Arguments   --password=string  - A valid MODX password for the user. If not specified, MODX will generate one and return the value from the command.  --fullname='string'  - An optional full name for the user.  --active  - Indicates if the user should be marked active when created.  --sudo  - Indicates if the user should be created as a sudo user.   NOTE: This Action uses the security/user/create processor from the MODX site in the specified profile to create a user. It accepts any additional arguments that the processor does.", 
            "title": "The UserCreate Action"
        }, 
        {
            "location": "/use/packages/gc/", 
            "text": "Packages/GC\n\n\nPackage Garbage Collection\n\n\nYou can remove outdated packages from a profiled MODX deployment using the following command:\n\n\nphp teleport.phar --action=Packages/GC --profile=profile/mysite.profile.json\n\n\n\nGarbage Collection for MODX Package Management\n\n\nRequired Arguments\n\n\n\n\n--profile=path\n - A valid stream path to a Teleport \nProfile\n defining the MODX instance this action is to be performed against.\n\n\n\n\nOptional Arguments\n\n\n\n\n--preserveZip\n - Prevents removal of the zip files for the outdated packages, removing only the extracted package directories and database records.", 
            "title": "Garbage Collection"
        }, 
        {
            "location": "/use/packages/gc/#packagesgc", 
            "text": "", 
            "title": "Packages/GC"
        }, 
        {
            "location": "/use/packages/gc/#package-garbage-collection", 
            "text": "You can remove outdated packages from a profiled MODX deployment using the following command:  php teleport.phar --action=Packages/GC --profile=profile/mysite.profile.json", 
            "title": "Package Garbage Collection"
        }, 
        {
            "location": "/use/packages/gc/#garbage-collection-for-modx-package-management", 
            "text": "Required Arguments   --profile=path  - A valid stream path to a Teleport  Profile  defining the MODX instance this action is to be performed against.   Optional Arguments   --preserveZip  - Prevents removal of the zip files for the outdated packages, removing only the extracted package directories and database records.", 
            "title": "Garbage Collection for MODX Package Management"
        }, 
        {
            "location": "/use/server/", 
            "text": "Teleport HTTP Server\n\n\nThe Teleport HTTP Server is an HTTP server you can run to listen to requests for Teleport Actions on a particular port.\n\n\nRunning the HTTP Server\n\n\nYou can run the Teleport HTTP Server very easily by executing the \nbin/server.php\n or \nbin/server\n scripts included with Teleport and specifying the port you want to run the server on.\n\n\nbin/server 8082\n\n\n\nOr...\n\n\nphp bin/server.php 1337 --verbose\n\n\n\nThis starts the Teleport HTTP listener and allows execution of Teleport Actions over the HTTP protocol. The \n--verbose\n option makes Teleport output useful information to stdout from the server.\n\n\nExecuting Teleport Actions on the Server\n\n\nCalling a Teleport Action on the server takes the form:\n\n\nhttp://hostname:port/Action?arg1=value\narg2=1\narg3=value2\n\n\n\nFor example, to run an Extract:\n\n\nhttp://localhost:1337/Extract?profile=profile/test_profile.profile.json\ntpl=tpl/complete.tpl.json", 
            "title": "Server"
        }, 
        {
            "location": "/use/server/#teleport-http-server", 
            "text": "The Teleport HTTP Server is an HTTP server you can run to listen to requests for Teleport Actions on a particular port.", 
            "title": "Teleport HTTP Server"
        }, 
        {
            "location": "/use/server/#running-the-http-server", 
            "text": "You can run the Teleport HTTP Server very easily by executing the  bin/server.php  or  bin/server  scripts included with Teleport and specifying the port you want to run the server on.  bin/server 8082  Or...  php bin/server.php 1337 --verbose  This starts the Teleport HTTP listener and allows execution of Teleport Actions over the HTTP protocol. The  --verbose  option makes Teleport output useful information to stdout from the server.", 
            "title": "Running the HTTP Server"
        }, 
        {
            "location": "/use/server/#executing-teleport-actions-on-the-server", 
            "text": "Calling a Teleport Action on the server takes the form:  http://hostname:port/Action?arg1=value arg2=1 arg3=value2  For example, to run an Extract:  http://localhost:1337/Extract?profile=profile/test_profile.profile.json tpl=tpl/complete.tpl.json", 
            "title": "Executing Teleport Actions on the Server"
        }, 
        {
            "location": "/use/extract/tpl/", 
            "text": "Extract tpls\n\n\nExtract tpls are JSON templates defining what, when, and how various objects, scripts, or file artifacts are to be extracted and packaged into a Teleport transport package.\n\n\nThe properties of an Extract tpl\n\n\nEach Extract tpl defines the attributes and vehicles that make up the manifest of a Teleport transport package. The manifest defines what is packaged and in what order.\n\n\nname\n\n\nEvery tpl has a name property which helps identify the tpl used to create a transport package. This name is included in the generated package filename.\n\n\nattributes\n\n\nThe attributes of a Teleport transport package can be set to make distributable packages that can be installed from within the MODX package management interface. You can set readme, changelog, and license attributes, as well as the \nrequires\n attribute supported in MODX \n=2.4 to specify package dependencies.\n\n\nNote that you can also define an attribute as an object with the properties \nsourceType\n and \nsource\n. For now, \nfileContent\n is the only supported \nsourceType\n, which uses the \nsource\n attribute value as a file path or stream URL from which to read the value of the attribute.\n\n\n\"attributes\": {\n    \"changelog\": {\n        \"sourceType\": \"fileContent\",\n        \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\"\n    },\n    \"requires\": {\n        \"collections\": \"~3.0\"\n    }\n}\n\n\n\nThis makes it possible to use Teleport to create Extras packages that are ready to install from within MODX. Care will just need to be taken not to use any Teleport-specific \nvehicle\n classes in the packages created for this purpose.\n\n\nvehicles\n\n\nTeleport transport vehicles define artifacts that are to be packaged when the tpl is used in an Extract action. They can be core xPDOVehicle classes or they can be Teleport-specific or even custom implementations which extend any of the core xPDOVehicle classes.\n\n\nFor example, the following defines a single vehicle that packages files from a specified source into a specified target:\n\n\n\"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOFileVehicle\",\n        \"object\": {\n            \"source\": \"{+properties.modx.core_path}components/test\",\n            \"target\": \"return MODX_CORE_PATH . 'components';\"\n        },\n        \"attributes\": {\"vehicle_class\": \"xPDOFileVehicle\"}\n    }\n]\n\n\n\nOr here is a more complex definition that packages all system and context settings from the MODX database:\n\n\n\"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modSystemSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    },\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modContextSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    }\n]\n\n\n\nIncluded tpls\n\n\n\n\nchangeset.tpl.json\n - Extract a defined set of changes being recorded by callback functions in the MODX configuration.\n\n\ncomplete.tpl.json\n - Extract all core objects, files, and custom database tables from a MODX deployment for replacing an entire deployment.\n\n\ncomplete_db.tpl.json\n - Extract all core objects and custom database tables from a MODX deployment.\n\n\ndevelop.tpl.json\n - Extract all core objects, files, and custom database tables from a MODX deployment to inject into another deployment, supplementing existing objects and custom tables.\n\n\nelements.tpl.json\n - Extract all Elements and related data from a MODX deployment to inject into another deployment, updating and supplementing existing Elements.\n\n\npackages.tpl.json\n - Extract all Packages registered in a MODX deployment to inject into another deployment.\n\n\npromote.tpl.json\n - Extract core objects, files, and custom database tables except settings from a MODX deployment to inject into another deployment.\n\n\nresource_children.tpl.json\n - Extract all Resources that are children of a specified parent Resource.\n\n\nresources.tpl.json\n - Extract all Resources from a MODX deployment to inject into another deployment, updating and supplementing existing Resources.\n\n\nsettings.tpl.json\n - Extract all Settings from a MODX deployment to inject into another deployment, updating and supplementing existing Settings.\n\n\nuser.tpl.json\n - Extract a single User and related data from a MODX deployment to inject into another deployment.\n\n\nusers.tpl.json\n - Extract all Users from a MODX deployment to inject into another deployment, updating and supplementing existing Users.\n\n\n\n\nCustom tpls\n\n\nYou can create and use your own custom tpls with Teleport. See \nExtending Teleport with Custom Extract Tpls\n to get started.", 
            "title": "Intro to Extract Tpls"
        }, 
        {
            "location": "/use/extract/tpl/#extract-tpls", 
            "text": "Extract tpls are JSON templates defining what, when, and how various objects, scripts, or file artifacts are to be extracted and packaged into a Teleport transport package.", 
            "title": "Extract tpls"
        }, 
        {
            "location": "/use/extract/tpl/#the-properties-of-an-extract-tpl", 
            "text": "Each Extract tpl defines the attributes and vehicles that make up the manifest of a Teleport transport package. The manifest defines what is packaged and in what order.  name  Every tpl has a name property which helps identify the tpl used to create a transport package. This name is included in the generated package filename.  attributes  The attributes of a Teleport transport package can be set to make distributable packages that can be installed from within the MODX package management interface. You can set readme, changelog, and license attributes, as well as the  requires  attribute supported in MODX  =2.4 to specify package dependencies.  Note that you can also define an attribute as an object with the properties  sourceType  and  source . For now,  fileContent  is the only supported  sourceType , which uses the  source  attribute value as a file path or stream URL from which to read the value of the attribute.  \"attributes\": {\n    \"changelog\": {\n        \"sourceType\": \"fileContent\",\n        \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\"\n    },\n    \"requires\": {\n        \"collections\": \"~3.0\"\n    }\n}  This makes it possible to use Teleport to create Extras packages that are ready to install from within MODX. Care will just need to be taken not to use any Teleport-specific  vehicle  classes in the packages created for this purpose.  vehicles  Teleport transport vehicles define artifacts that are to be packaged when the tpl is used in an Extract action. They can be core xPDOVehicle classes or they can be Teleport-specific or even custom implementations which extend any of the core xPDOVehicle classes.  For example, the following defines a single vehicle that packages files from a specified source into a specified target:  \"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOFileVehicle\",\n        \"object\": {\n            \"source\": \"{+properties.modx.core_path}components/test\",\n            \"target\": \"return MODX_CORE_PATH . 'components';\"\n        },\n        \"attributes\": {\"vehicle_class\": \"xPDOFileVehicle\"}\n    }\n]  Or here is a more complex definition that packages all system and context settings from the MODX database:  \"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modSystemSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    },\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modContextSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    }\n]", 
            "title": "The properties of an Extract tpl"
        }, 
        {
            "location": "/use/extract/tpl/#included-tpls", 
            "text": "changeset.tpl.json  - Extract a defined set of changes being recorded by callback functions in the MODX configuration.  complete.tpl.json  - Extract all core objects, files, and custom database tables from a MODX deployment for replacing an entire deployment.  complete_db.tpl.json  - Extract all core objects and custom database tables from a MODX deployment.  develop.tpl.json  - Extract all core objects, files, and custom database tables from a MODX deployment to inject into another deployment, supplementing existing objects and custom tables.  elements.tpl.json  - Extract all Elements and related data from a MODX deployment to inject into another deployment, updating and supplementing existing Elements.  packages.tpl.json  - Extract all Packages registered in a MODX deployment to inject into another deployment.  promote.tpl.json  - Extract core objects, files, and custom database tables except settings from a MODX deployment to inject into another deployment.  resource_children.tpl.json  - Extract all Resources that are children of a specified parent Resource.  resources.tpl.json  - Extract all Resources from a MODX deployment to inject into another deployment, updating and supplementing existing Resources.  settings.tpl.json  - Extract all Settings from a MODX deployment to inject into another deployment, updating and supplementing existing Settings.  user.tpl.json  - Extract a single User and related data from a MODX deployment to inject into another deployment.  users.tpl.json  - Extract all Users from a MODX deployment to inject into another deployment, updating and supplementing existing Users.", 
            "title": "Included tpls"
        }, 
        {
            "location": "/use/extract/tpl/#custom-tpls", 
            "text": "You can create and use your own custom tpls with Teleport. See  Extending Teleport with Custom Extract Tpls  to get started.", 
            "title": "Custom tpls"
        }, 
        {
            "location": "/use/extract/tpl/resource_children/", 
            "text": "resource_children.tpl.json\n\n\nThis tpl extracts all Children of a specified parent Resource recursively.\n\n\nThe following example command would extract all Children of the Resource with an id of 2.\n\n\nphp teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/resource_children.tpl.json --parent=2\n\n\n\nThis does not include the parent Resource in the Extract.\n\n\nArguments\n\n\nRequired\n\n\n\n\n--parent=id\n - Indicates the id of the parent Resource to extract children from.", 
            "title": "resource_children.tpl"
        }, 
        {
            "location": "/use/extract/tpl/resource_children/#resource_childrentpljson", 
            "text": "This tpl extracts all Children of a specified parent Resource recursively.  The following example command would extract all Children of the Resource with an id of 2.  php teleport.phar --action=Extract --profile=profile/mysite.profile.json --tpl=phar://teleport.phar/tpl/resource_children.tpl.json --parent=2  This does not include the parent Resource in the Extract.", 
            "title": "resource_children.tpl.json"
        }, 
        {
            "location": "/use/extract/tpl/resource_children/#arguments", 
            "text": "Required   --parent=id  - Indicates the id of the parent Resource to extract children from.", 
            "title": "Arguments"
        }, 
        {
            "location": "/extend/custom-actions/", 
            "text": "Custom Actions", 
            "title": "Custom Actions"
        }, 
        {
            "location": "/extend/custom-actions/#custom-actions", 
            "text": "", 
            "title": "Custom Actions"
        }, 
        {
            "location": "/extend/custom-extract-tpls/", 
            "text": "Custom Extract tpls\n\n\nNOTE: If you want to maintain a custom Teleport project with your own templates so that you can compile your own custom phar or track your project in version control, you should start a new project using the \nTeleport boilerplate project\n. This will allow you to maintain your own custom code and update the core Teleport code and artifacts as dictated by your own project requirements.\n\n\nDefining a tpl\n\n\nAn Extract tpl is a JSON file that describes how to build a Teleport transport package. It consists of three main properties: a \nname\n, some package \nattributes\n, and a collection of one or more \nvehicles\n.\n\n\nNaming the tpl\n\n\nAn Extract tpl's \nname\n is used when producing the file name of an Extracted transport package. For this reason, you should avoid the \n-\n or other special characters in the tpl \nname\n. Use \n_\n for word separators if you need them.\n\n\nAttributes for the package\n\n\navailable in teleport \n=1.2.0\n\n\nThe \nattributes\n property provides a way to set the attributes of the transport package that is produced by the Extract. For instance, this can be used to set package attributes used by package management when installing Extras, allowing you to use Teleport as an easy way to create installable transport packages for use within any MODX installation. NOTE however that when producing packages to be used as MODX Extras, you must avoid the use of Teleport-specific transport vehicle classes. Limit the vehicles you define for these packages to those available in xPDO itself (\nxPDOObjectVehicle\n, \nxPDOFileVehicle\n, \nxPDOScriptVehicle\n, or \nxPDOTransportVehicle\n).\n\n\nHere is an example use of the \nattributes\n property that could be used to create an installable Extras package which. This theoretical \ntest\n component located in the MODX \ncore/components/\n directory specifies a dependency on the collections extra at version 3.x (for MODX 2.4 package dependency features) and includes the content of a changelog.txt file located within the component's directory as the \nchangelog\n attribute:\n\n\n\"attributes\": {\n    \"changelog\": {\n        \"sourceType\": \"fileContent\",\n        \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\"\n    },\n    \"requires\": {\n        \"collections\": \"~3.0\"\n    }\n},\n\n\n\nAs you can see in this example, individual attributes can get their content from a file available to the Extract by setting the value of the attribute to an object with the properties \nsourceType\n and \nsource\n where the \nsourceType\n value is set to \nfileContent\n and the \nsource\n is the full path to the file to use the content from. Other \nsourceType\n's may be supported in the future.\n\n\nDescribing the Vehicles\n\n\nThe \nvehicles\n property describes a collection of xPDO transport vehicles that will be included in the package in the order they are described. The vehicles can be core xPDOVehicle derivatives, Teleport-specific derivatives, or even custom derivatives.\n\n\nA simple example from the \nsettings.tpl.json\n included with Teleport describes two xPDOObject vehicles that will package all System and Context Settings from a MODX installation:\n\n\n\"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modSystemSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    },\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modContextSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    }\n]\n\n\n\nWhen \nInject\ned, the packaged object vehicles will preserve their payload's primary keys and update existing objects in the injection target that match by primary key, as described in the attributes provided for each vehicle in the collection.\n\n\nEach vehicle consists of an optional \nvehicle_package\n, a \nvehicle_class\n, an \nobject\n defining the vehicle payload, and optional \nattributes\n of the vehicle. The \nvehicle_package\n should be omitted when using the core xPDOVehicle implementations. The \nobject\n will be unique to each \nvehicle_class\n implementation.\n\n\nxPDOFileVehicle\n\n\n\n\nsource\n: the absolute path to a file or directory to be packaged\n\n\ntarget\n: a PHP expression that will be \neval()\n'd during installation to determine where the file/directory is unpacked\n\n\n\n\nxPDOObjectVehicle\n\n\n\n\nclass\n: defines the xPDOObject class to be packaged by the vehicle\n\n\ncriteria\n: an array or object describing the criteria that will be used to select instances of the specified \nclass\n\n\ngraph\n: defines an object graph to use to package related xPDOObjects\n\n\ngraphCriteria\n: defines the criteria for filtering related xPDOObjects selected by a \ngraph\n\n\nscript\n: an optional script to be used to create the vehicle or vehicles for this vehicle definition\n\n\npackage\n: the xPDO package name for the specified \nclass\n\n\n\n\nxPDOScriptVehicle\n\n\n\n\nsource\n: a script to be executed during installation of the vehicle", 
            "title": "Custom Extract Tpls"
        }, 
        {
            "location": "/extend/custom-extract-tpls/#custom-extract-tpls", 
            "text": "NOTE: If you want to maintain a custom Teleport project with your own templates so that you can compile your own custom phar or track your project in version control, you should start a new project using the  Teleport boilerplate project . This will allow you to maintain your own custom code and update the core Teleport code and artifacts as dictated by your own project requirements.", 
            "title": "Custom Extract tpls"
        }, 
        {
            "location": "/extend/custom-extract-tpls/#defining-a-tpl", 
            "text": "An Extract tpl is a JSON file that describes how to build a Teleport transport package. It consists of three main properties: a  name , some package  attributes , and a collection of one or more  vehicles .  Naming the tpl  An Extract tpl's  name  is used when producing the file name of an Extracted transport package. For this reason, you should avoid the  -  or other special characters in the tpl  name . Use  _  for word separators if you need them.  Attributes for the package  available in teleport  =1.2.0  The  attributes  property provides a way to set the attributes of the transport package that is produced by the Extract. For instance, this can be used to set package attributes used by package management when installing Extras, allowing you to use Teleport as an easy way to create installable transport packages for use within any MODX installation. NOTE however that when producing packages to be used as MODX Extras, you must avoid the use of Teleport-specific transport vehicle classes. Limit the vehicles you define for these packages to those available in xPDO itself ( xPDOObjectVehicle ,  xPDOFileVehicle ,  xPDOScriptVehicle , or  xPDOTransportVehicle ).  Here is an example use of the  attributes  property that could be used to create an installable Extras package which. This theoretical  test  component located in the MODX  core/components/  directory specifies a dependency on the collections extra at version 3.x (for MODX 2.4 package dependency features) and includes the content of a changelog.txt file located within the component's directory as the  changelog  attribute:  \"attributes\": {\n    \"changelog\": {\n        \"sourceType\": \"fileContent\",\n        \"source\": \"{+properties.modx.core_path}components/test/changelog.txt\"\n    },\n    \"requires\": {\n        \"collections\": \"~3.0\"\n    }\n},  As you can see in this example, individual attributes can get their content from a file available to the Extract by setting the value of the attribute to an object with the properties  sourceType  and  source  where the  sourceType  value is set to  fileContent  and the  source  is the full path to the file to use the content from. Other  sourceType 's may be supported in the future.  Describing the Vehicles  The  vehicles  property describes a collection of xPDO transport vehicles that will be included in the package in the order they are described. The vehicles can be core xPDOVehicle derivatives, Teleport-specific derivatives, or even custom derivatives.  A simple example from the  settings.tpl.json  included with Teleport describes two xPDOObject vehicles that will package all System and Context Settings from a MODX installation:  \"vehicles\": [\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modSystemSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    },\n    {\n        \"vehicle_class\": \"xPDOObjectVehicle\",\n        \"object\": {\n            \"class\": \"modContextSetting\",\n            \"criteria\": [\n                \"1 = 1\"\n            ],\n            \"package\": \"modx\"\n        },\n        \"attributes\": {\n            \"preserve_keys\": true,\n            \"update_object\": true\n        }\n    }\n]  When  Inject ed, the packaged object vehicles will preserve their payload's primary keys and update existing objects in the injection target that match by primary key, as described in the attributes provided for each vehicle in the collection.  Each vehicle consists of an optional  vehicle_package , a  vehicle_class , an  object  defining the vehicle payload, and optional  attributes  of the vehicle. The  vehicle_package  should be omitted when using the core xPDOVehicle implementations. The  object  will be unique to each  vehicle_class  implementation.  xPDOFileVehicle   source : the absolute path to a file or directory to be packaged  target : a PHP expression that will be  eval() 'd during installation to determine where the file/directory is unpacked   xPDOObjectVehicle   class : defines the xPDOObject class to be packaged by the vehicle  criteria : an array or object describing the criteria that will be used to select instances of the specified  class  graph : defines an object graph to use to package related xPDOObjects  graphCriteria : defines the criteria for filtering related xPDOObjects selected by a  graph  script : an optional script to be used to create the vehicle or vehicles for this vehicle definition  package : the xPDO package name for the specified  class   xPDOScriptVehicle   source : a script to be executed during installation of the vehicle", 
            "title": "Defining a tpl"
        }, 
        {
            "location": "/contribute/", 
            "text": "Contribute", 
            "title": "Contributing"
        }, 
        {
            "location": "/contribute/#contribute", 
            "text": "", 
            "title": "Contribute"
        }
    ]
}